{"ast":null,"code":"const API_KEY = \"00dbfd406a0acaaecc568e7ea6a34ce5\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nconst getWeatherData = (infoType, seachParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({\n    ...seachParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatCurrentWeather = data => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity,\n      wind\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    }\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    wind,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed\n  };\n};\nconst formatForecastWeather = data => {\n  let {\n    timezone,\n    daily,\n    hourly\n  } = data;\n  daily = daily.slice(1, 6).map();\n};\nconst getFormattedWeatherData = async searchParams => {\n  const formattedCurrentWeather = await getWeatherData(\"weather\", searchParams).then(formatCurrentWeather);\n  const {\n    lat,\n    lon\n  } = formattedCurrentWeather;\n  const formattedForecastWeather = await getWeatherData('onecall', {\n    lat,\n    lon,\n    exclude: \"current,minutely,alerts\",\n    units: searchParams.units\n  }).then(formattedForecastWeather);\n  return formattedCurrentWeather;\n};\nconst formatLocalTime = (secs, zone, format = \"cccc, dd LLL yyyy'\");\nexport default getFormattedWeatherData;","map":{"version":3,"names":["API_KEY","BASE_URL","getWeatherData","infoType","seachParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentWeather","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidity","wind","name","dt","sys","country","sunrise","sunset","weather","speed","details","icon","formatForecastWeather","timezone","daily","hourly","slice","map","getFormattedWeatherData","searchParams","formattedCurrentWeather","formattedForecastWeather","exclude","units","formatLocalTime","secs","zone","format"],"sources":["C:/Users/ashig/OneDrive/Desktop/weather-app/src/services/WeatherService.js"],"sourcesContent":["const API_KEY= \"00dbfd406a0acaaecc568e7ea6a34ce5\";\r\nconst BASE_URL=\"https://api.openweathermap.org/data/2.5\";\r\n \r\n const getWeatherData = (infoType, seachParams) => {\r\n    const url = new URL(BASE_URL + \"/\" + infoType);\r\n    url.search = new URLSearchParams({...seachParams, appid: \r\n    API_KEY });\r\n\r\n    return fetch(url)\r\n    .then((res) => res.json())\r\n };\r\n\r\n    const formatCurrentWeather = (data) => {\r\n        const {\r\n          coord: { lat, lon },\r\n          main: { temp, feels_like, temp_min, temp_max, humidity,wind },\r\n          name,\r\n          dt,\r\n          sys: { country, sunrise, sunset },\r\n          weather,\r\n          wind: { speed },\r\n        } = data\r\n        const {main: details, icon}=weather[0]\r\n\r\n        return {\r\n            lat,\r\n            lon,\r\n            temp,\r\n            feels_like,\r\n            temp_min,\r\n            temp_max,\r\n            humidity,\r\n            wind,\r\n            name,\r\n            dt,\r\n            country,\r\n            sunrise,\r\n            sunset,\r\n            details,\r\n            icon,\r\n            speed,\r\n          };\r\n }\r\n    \r\n \r\nconst formatForecastWeather = (data) => {\r\n    let{ timezone, daily, hourly} =data;\r\n    daily = daily.slice(1,6).map()\r\n\r\n}\r\n\r\n const getFormattedWeatherData = async (searchParams) => {\r\n    const formattedCurrentWeather = await getWeatherData(\"weather\", searchParams).\r\n    then( formatCurrentWeather)\r\n    \r\n    const {lat, lon} = formattedCurrentWeather\r\n    const formattedForecastWeather = await getWeatherData('onecall', {\r\n        lat,lon,\r\n        exclude: \"current,minutely,alerts\",\r\n        units: searchParams.units,\r\n    }).then(formattedForecastWeather)\r\n\r\n    return formattedCurrentWeather;\r\n };\r\n\r\n const formatLocalTime = (secs, zone,format = \"cccc, dd LLL yyyy'\")\r\n\r\n export default getFormattedWeatherData"],"mappings":"AAAA,MAAMA,OAAO,GAAE,kCAAkC;AACjD,MAAMC,QAAQ,GAAC,yCAAyC;AAEvD,MAAMC,cAAc,GAAG,CAACC,QAAQ,EAAEC,WAAW,KAAK;EAC/C,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACL,QAAQ,GAAG,GAAG,GAAGE,QAAQ,CAAC;EAC9CE,GAAG,CAACE,MAAM,GAAG,IAAIC,eAAe,CAAC;IAAC,GAAGJ,WAAW;IAAEK,KAAK,EACvDT;EAAQ,CAAC,CAAC;EAEV,OAAOU,KAAK,CAACL,GAAG,CAAC,CAChBM,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC;AAC7B,CAAC;AAEE,MAAMC,oBAAoB,GAAIC,IAAI,IAAK;EACnC,MAAM;IACJC,KAAK,EAAE;MAAEC,GAAG;MAAEC;IAAI,CAAC;IACnBC,IAAI,EAAE;MAAEC,IAAI;MAAEC,UAAU;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC,QAAQ;MAACC;IAAK,CAAC;IAC7DC,IAAI;IACJC,EAAE;IACFC,GAAG,EAAE;MAAEC,OAAO;MAAEC,OAAO;MAAEC;IAAO,CAAC;IACjCC,OAAO;IACPP,IAAI,EAAE;MAAEQ;IAAM;EAChB,CAAC,GAAGlB,IAAI;EACR,MAAM;IAACI,IAAI,EAAEe,OAAO;IAAEC;EAAI,CAAC,GAACH,OAAO,CAAC,CAAC,CAAC;EAEtC,OAAO;IACHf,GAAG;IACHC,GAAG;IACHE,IAAI;IACJC,UAAU;IACVC,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRC,IAAI;IACJC,IAAI;IACJC,EAAE;IACFE,OAAO;IACPC,OAAO;IACPC,MAAM;IACNG,OAAO;IACPC,IAAI;IACJF;EACF,CAAC;AACV,CAAC;AAGF,MAAMG,qBAAqB,GAAIrB,IAAI,IAAK;EACpC,IAAG;IAAEsB,QAAQ;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAExB,IAAI;EACnCuB,KAAK,GAAGA,KAAK,CAACE,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,CAACC,GAAG,EAAE;AAElC,CAAC;AAEA,MAAMC,uBAAuB,GAAG,MAAOC,YAAY,IAAK;EACrD,MAAMC,uBAAuB,GAAG,MAAM1C,cAAc,CAAC,SAAS,EAAEyC,YAAY,CAAC,CAC7EhC,IAAI,CAAEG,oBAAoB,CAAC;EAE3B,MAAM;IAACG,GAAG;IAAEC;EAAG,CAAC,GAAG0B,uBAAuB;EAC1C,MAAMC,wBAAwB,GAAG,MAAM3C,cAAc,CAAC,SAAS,EAAE;IAC7De,GAAG;IAACC,GAAG;IACP4B,OAAO,EAAE,yBAAyB;IAClCC,KAAK,EAAEJ,YAAY,CAACI;EACxB,CAAC,CAAC,CAACpC,IAAI,CAACkC,wBAAwB,CAAC;EAEjC,OAAOD,uBAAuB;AACjC,CAAC;AAED,MAAMI,eAAe,IAAIC,IAAI,EAAEC,IAAI,EAACC,MAAM,GAAG,oBAAoB,CAAC;AAElE,eAAeT,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}